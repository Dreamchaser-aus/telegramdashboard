import os
import logging
import psycopg2
import asyncio
import nest_asyncio
from datetime import datetime, date
from flask import Flask, render_template, request
from flask import jsonify
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ChatMemberHandler, ContextTypes, filters
)
from hypercorn.asyncio import serve
from hypercorn.config import Config
from dotenv import load_dotenv

load_dotenv()
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

@app.template_filter('format_datetime')
def format_datetime_filter(value):
    if not value:
        return "Êó†"
    try:
        dt = datetime.fromisoformat(value)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return value
        
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

def get_conn():
    return psycopg2.connect(DATABASE_URL)

def init_db():
    with get_conn() as conn, conn.cursor() as c:
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                phone TEXT,
                points INTEGER DEFAULT 0,
                plays INTEGER DEFAULT 0,
                created_at TEXT,
                last_play TEXT,
                invited_by BIGINT,
                is_blocked INTEGER DEFAULT 0
            );
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS game_history (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                created_at TIMESTAMP NOT NULL,
                user_score INTEGER,
                bot_score INTEGER,
                result TEXT,
                points_change INTEGER
            );
        ''')
        # Á°Æ‰øù user_score Â≠óÊÆµÂ≠òÂú®
        c.execute('''
            ALTER TABLE game_history
            ADD COLUMN IF NOT EXISTS user_score INTEGER;
        ''')
        # Á°Æ‰øù bot_score Â≠óÊÆµÂ≠òÂú®
        c.execute('''
            ALTER TABLE game_history
            ADD COLUMN IF NOT EXISTS bot_score INTEGER;
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS invite_rewards (
                id SERIAL PRIMARY KEY,
                inviter BIGINT NOT NULL,
                invitee BIGINT NOT NULL,
                reward_given BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT NOW()
            );
        ''')
        conn.commit()

@app.route("/")
@app.route("/")
@app.route("/")
@app.route("/")
@app.route("/")

def dashboard():
    try:
        keyword = request.args.get("keyword", "").strip()
        authorized = request.args.get("authorized", "").strip()
        page = int(request.args.get("page", 1))
        per_page = 20
        offset = (page - 1) * per_page

        conditions = []
        params = []

        if keyword:
            # Ê≥®ÊÑèËøôÈáå i.username Áî®‰∫éÈÇÄËØ∑‰∫∫Áî®Êà∑ÂêçÊ®°Á≥äÊêúÁ¥¢
            conditions.append("(u.username ILIKE %s OR u.phone ILIKE %s OR i.username ILIKE %s)")
            params.extend([f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"])

        if authorized == '1':
            conditions.append("u.phone IS NOT NULL")
        elif authorized == '0':
            conditions.append("u.phone IS NULL")

        where_sql = "WHERE " + " AND ".join(conditions) if conditions else ""

        with get_conn() as conn, conn.cursor() as c:
            # ÊÄªÊï∞Êü•ËØ¢Êó∂‰πüË¶ÅÂä† LEFT JOINÔºå‰øùËØÅ i Âà´ÂêçÂèØÁî®
            c.execute(f"""
                SELECT COUNT(*)
                FROM users u
                LEFT JOIN users i ON u.invited_by = i.user_id
                {where_sql}
            """, params)
            total_count = c.fetchone()[0]

            c.execute(f"""
                SELECT u.user_id, u.first_name, u.last_name, u.username, u.phone, u.points, u.plays,
                       u.created_at, u.last_play, u.invited_by, u.is_blocked, i.username as inviter_username,
                       COALESCE((SELECT COUNT(*) FROM users u2 WHERE u2.invited_by = u.user_id), 0) AS invite_count
                FROM users u
                LEFT JOIN users i ON u.invited_by = i.user_id
                {where_sql}
                ORDER BY u.created_at DESC
                LIMIT %s OFFSET %s
            """, params + [per_page, offset])
            users = c.fetchall()

            # ÁªüËÆ°‰ø°ÊÅØ
            c.execute("SELECT COUNT(*) FROM users")
            total_users = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM users WHERE phone IS NOT NULL")
            authorized_users = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 1")
            blocked_users = c.fetchone()[0]
            c.execute("SELECT COALESCE(SUM(points), 0) FROM users")
            total_points = c.fetchone()[0]

        total_pages = (total_count + per_page - 1) // per_page

        stats = {
            "total_users": total_users,
            "authorized_users": authorized_users,
            "blocked_users": blocked_users,
            "total_points": total_points,
            "page": page,
            "total_pages": total_pages
        }

        return render_template("dashboard.html",
                               users=users,
                               stats=stats,
                               keyword=keyword,
                               is_authorized=authorized)
    except Exception as e:
        import traceback
        return f"<pre>Âá∫Èîô‰∫ÜÔºö\n{traceback.format_exc()}</pre>"

@app.route("/invitees")
def invitees():
    inviter_id = request.args.get("user_id")
    if not inviter_id:
        return "Áº∫Â∞ëÈÇÄËØ∑‰∫∫ user_id ÂèÇÊï∞", 400

    with get_conn() as conn, conn.cursor() as c:
        c.execute("""
            SELECT user_id, username, phone, points, created_at
            FROM users WHERE invited_by = %s
            ORDER BY created_at DESC
        """, (inviter_id,))
        invitees = c.fetchall()

        # Êü•ËØ¢ÈÇÄËØ∑‰∫∫Áî®Êà∑ÂêçÔºåÊñπ‰æøÈ°µÈù¢ÊòæÁ§∫
        c.execute("SELECT username FROM users WHERE user_id = %s", (inviter_id,))
        inviter_username = c.fetchone()
        inviter_username = inviter_username[0] if inviter_username else "Êú™Áü•"

    return render_template("invitees.html",
                           invitees=invitees,
                           inviter_username=inviter_username,
                           inviter_id=inviter_id)
        
    
@app.route("/update_block_status", methods=["POST"])
def update_block_status():
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        is_blocked = int(data.get("is_blocked"))
        with get_conn() as conn, conn.cursor() as c:
            c.execute("UPDATE users SET is_blocked = %s WHERE user_id = %s", (is_blocked, user_id))
            conn.commit()
        return "OK"
    except Exception as e:
        logging.error(f"Êõ¥Êñ∞Â∞ÅÁ¶ÅÁä∂ÊÄÅÂ§±Ë¥•: {e}")
        return "Â§±Ë¥•", 500
    
@app.route("/update_user", methods=["POST"])
def update_user():
    user_id = request.form.get("user_id")
    try:
        points = int(request.form.get("points", 0))
        plays = int(request.form.get("plays", 0))
        is_blocked = int(request.form.get("is_blocked", 0))
    except ValueError:
        return "ÂèÇÊï∞ÈîôËØØ", 400

    with get_conn() as conn, conn.cursor() as c:
        c.execute(
            "UPDATE users SET points = %s, plays = %s, is_blocked = %s WHERE user_id = %s",
            (points, plays, is_blocked, user_id)
        )
        conn.commit()
    return "OK"

@app.route("/delete_user", methods=["POST"])
def delete_user():
    user_id = request.form.get("user_id")
    with get_conn() as conn, conn.cursor() as c:
        c.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
        conn.commit()
    return "OK"
    
@app.route('/rank_data')
def rank_data():
    today = date.today().isoformat()
    with get_conn() as conn, conn.cursor() as c:
        c.execute("SELECT username, first_name, points FROM users WHERE last_play LIKE %s ORDER BY points DESC LIMIT 10", (f"{today}%",))
        rows = c.fetchall()
    data = [
        {"username": r[0], "first_name": r[1], "points": r[2]}
        for r in rows
    ]
    return jsonify(data)

@app.route("/game_history")
def game_history():
    try:
        user_id = request.args.get("user_id")
        page = int(request.args.get("page", 1))
        per_page = 50

        where_sql = ""
        params = []

        if user_id:
            where_sql = "WHERE user_id = %s"
            params.append(user_id)

        with get_conn() as conn, conn.cursor() as c:
            c.execute(f"SELECT COUNT(*) FROM game_history {where_sql}", params)
            total_count = c.fetchone()[0]

            offset = (page - 1) * per_page

            c.execute(f"""
                SELECT user_id, created_at, user_score, bot_score, result, points_change
                FROM game_history
                {where_sql}
                ORDER BY created_at DESC
                LIMIT %s OFFSET %s
            """, params + [per_page, offset])

            records = c.fetchall()

        total_pages = (total_count + per_page - 1) // per_page

        return render_template("game_history.html",
                               records=records,
                               page=page,
                               total_pages=total_pages,
                               user_id=user_id)
    except Exception as e:
        import traceback
        return f"<pre>Âá∫Èîô‰∫ÜÔºö\n{traceback.format_exc()}</pre>"

async def send_game_rules(chat_id, bot, language_code='zh'):
    if language_code and language_code.startswith('en'):
        text = (
            "üé≤ Game Rules:\n"
            "1. Click the button or send a dice to start.\n"
            "2. You and the bot each roll a dice, higher score wins.\n"
            "3. Win: +10 points, Lose: -5 points, Tie: no change.\n"
            "4. You can play up to 10 times per day.\n"
            "5. Phone number authorization is required.\n"
            "6. Invite friends to earn bonus points!\n"
            "Good luck and have fun!"
        )
    else:
        text = (
            "üé≤ Ê∏∏ÊàèÁé©Ê≥ïËØ¥ÊòéÔºö\n"
            "1. ÈÄöËøáÁÇπÂáªÊåâÈíÆÊàñÂèëÈÄÅÈ™∞Â≠êÂºÄÂßãÊ∏∏Êàè„ÄÇ\n"
            "2. ‰Ω†ÂíåBotÂêÑÊé∑‰∏ÄÊ¨°È™∞Â≠êÔºåÁÇπÊï∞Â§ßËÄÖËé∑ËÉú„ÄÇ\n"
            "3. Ëµ¢Âæó +10 ÁßØÂàÜÔºåËæìÊéâ -5 ÁßØÂàÜÔºåÂπ≥Â±Ä‰∏çÂä†Âáè„ÄÇ\n"
            "4. ÊØèÂ§©ÊúÄÂ§öÂèØ‰ª•Áé©10Ê¨°„ÄÇ\n"
            "5. ÊéàÊùÉÊâãÊú∫Âè∑ÂêéÊñπÂèØÂèÇ‰∏éÊ∏∏Êàè„ÄÇ\n"
            "6. ÈÇÄËØ∑Â•ΩÂèãÂèØËé∑ÂæóÈ¢ùÂ§ñÁßØÂàÜÂ•ñÂä±ÔºÅ\n"
            "Á•ù‰Ω†Ê∏∏ÊàèÊÑâÂø´ÔºÅ"
        )
    await bot.send_message(chat_id=chat_id, text=text)

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = query.from_user.language_code or 'zh'
    await send_game_rules(query.message.chat_id, context.bot, user_lang)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    inviter_id = int(context.args[0]) if context.args else None
    
    # Èò≤Ê≠¢Ëá™Â∑±ÈÇÄËØ∑Ëá™Â∑±
    if inviter_id == user.id:
        inviter_id = None

    with get_conn() as conn, conn.cursor() as c:
        c.execute("SELECT 1 FROM users WHERE user_id = %s", (user.id,))
        if not c.fetchone():
            now = datetime.now().isoformat()
            c.execute("""
                INSERT INTO users (user_id, first_name, last_name, username, plays, points, created_at, invited_by)
                VALUES (%s, %s, %s, %s, 0, 0, %s, %s)
            """, (user.id, user.first_name, user.last_name, user.username, now, inviter_id))
            conn.commit()

    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± ÂàÜ‰∫´ÊâãÊú∫Âè∑", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text("‚ö†Ô∏è ‰∏∫ÂèÇ‰∏éÁæ§ÁªÑÊ∏∏ÊàèÔºåËØ∑ÂÖàÊéàÊùÉÊâãÊú∫Âè∑Ôºö", reply_markup=keyboard)
    await update.message.reply_text("‚ÑπÔ∏è ÊÉ≥‰∫ÜËß£Ê∏∏ÊàèÁé©Ê≥ïÔºåËØ∑ÂèëÈÄÅ /help Êü•ÁúãËØ¶ÁªÜËØ¥Êòé„ÄÇ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang = update.effective_user.language_code or 'zh'
    if user_lang.startswith('en'):
        help_text = (
            "ü§ñ Available commands:\n\n"
            "/start - Start and authorize your phone number\n"
            "/help - Show this help message\n"
            "/profile - View your points and today's play count\n"
            "/invite - Get your invite link\n"
            "/rank - Today's points leaderboard\n"
            "/share - Share your invite link\n\n"
            "üé≤ Roll dice in group chat to start playing, up to 10 times a day.\n"
            "üì± Phone authorization required before playing.\n"
            "üèÜ Invite friends to earn bonus points!\n"
            "\nHave fun!"
        )
    else:
        help_text = (
            "ü§ñ ÂèØÁî®ÂëΩ‰ª§ÂàóË°®Ôºö\n\n"
            "/start - ÂºÄÂßã‰ΩøÁî®Êú∫Âô®‰∫∫ÔºåÊéàÊùÉÊâãÊú∫Âè∑\n"
            "/help - ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ\n"
            "/profile - Êü•Áúã‰∏™‰∫∫ÁßØÂàÜÂíå‰ªäÊó•Ê∏∏ÊàèÊ¨°Êï∞\n"
            "/invite - Ëé∑Âèñ‰Ω†ÁöÑ‰∏ìÂ±ûÈÇÄËØ∑ÈìæÊé•\n"
            "/rank - Êü•Áúã‰ªäÊó•ÁßØÂàÜÊéíË°åÊ¶ú\n"
            "/share - ÂàÜ‰∫´ÈÇÄËØ∑ÈìæÊé•\n\n"
            "üé≤ Âú®Áæ§ÁªÑ‰∏≠ÂèëÈÄÅÈ™∞Â≠êÂç≥ÂèØÂºÄÂßãÊ∏∏ÊàèÔºåÊúÄÂ§öÊØèÂ§©10Ê¨°\n"
            "üì± ÈúÄË¶ÅÂÖàÊéàÊùÉÊâãÊú∫Âè∑ÊâçËÉΩÂèÇ‰∏éÊ∏∏Êàè\n"
            "üèÜ ÈÇÄËØ∑Â•ΩÂèãÂèØ‰ª•Ëé∑ÂæóÁßØÂàÜÂ•ñÂä±\n"
            "\nÁ•ù‰Ω†Ê∏∏ÊàèÊÑâÂø´ÔºÅ"
        )
    await update.message.reply_text(help_text)

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not update.message.contact or update.message.contact.user_id != user.id:
        await update.message.reply_text("‚ö†Ô∏è ËØ∑ÂèëÈÄÅÊÇ®Ëá™Â∑±ÁöÑÊâãÊú∫Âè∑ÊéàÊùÉ„ÄÇ")
        return
    phone = update.message.contact.phone_number
    with get_conn() as conn, conn.cursor() as c:
        c.execute("UPDATE users SET phone = %s WHERE user_id = %s", (phone, user.id))
        conn.commit()

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üé≤ ÂºÄÂßãÊ∏∏Êàè", callback_data="start_game")]])
    await update.message.reply_text("‚úÖ ÊâãÊú∫Âè∑ÊéàÊùÉÊàêÂäüÔºÅÁÇπÂáªÊåâÈíÆÂºÄÂßãÊ∏∏ÊàèÂêßÔΩû", reply_markup=keyboard)
    await reward_inviter(user.id, context)

async def reward_inviter(user_id, context):
    try:
        with get_conn() as conn, conn.cursor() as c:
            c.execute("SELECT invited_by, plays FROM users WHERE user_id = %s", (user_id,))
            row = c.fetchone()
            if not row:
                return
            inviter, plays = row
            if inviter and plays > 0:
                # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊúâÂ•ñÂä±ÂèëÊîæËÆ∞ÂΩï
                c.execute("SELECT reward_given FROM invite_rewards WHERE inviter = %s AND invitee = %s", (inviter, user_id))
                reward_row = c.fetchone()

                if reward_row is None:
                    # ËøòÊ≤°ÊúâËÆ∞ÂΩïÔºåÊèíÂÖ•‰∏ÄÊù°Êú™ÂèëÊîæÂ•ñÂä±ËÆ∞ÂΩï
                    c.execute("INSERT INTO invite_rewards (inviter, invitee, reward_given) VALUES (%s, %s, FALSE)", (inviter, user_id))
                    conn.commit()
                    reward_row = (False,)

                if reward_row[0] is False:
                    # ÂèëÊîæÁßØÂàÜÂ•ñÂä±
                    c.execute("UPDATE users SET points = points + 10 WHERE user_id = %s RETURNING points", (inviter,))
                    inviter_points = c.fetchone()[0]
                    # Ê†áËÆ∞Â•ñÂä±Â∑≤ÂèëÊîæ
                    c.execute("UPDATE invite_rewards SET reward_given = TRUE WHERE inviter = %s AND invitee = %s", (inviter, user_id))
                    conn.commit()

                    try:
                        await context.bot.send_message(
                            chat_id=inviter,
                            text=f"üéâ ‰Ω†ÈÇÄËØ∑ÁöÑÁî®Êà∑ÊàêÂäüÂèÇ‰∏éÊ∏∏ÊàèÔºåËé∑Âæó +10 ÁßØÂàÜÂ•ñÂä±ÔºÅ\nüèÜ ÂΩìÂâçÊÄªÁßØÂàÜÔºö{inviter_points}\nÁªßÁª≠ÈÇÄËØ∑Êõ¥Â§öÂ•ΩÂèãÔºåÁßØÂàÜË∂äÂ§öË∂äÁ≤æÂΩ©ÔºÅ"
                        )
                    except Exception:
                        logging.warning(f"ÈÇÄËØ∑ÁßØÂàÜÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•ÔºåÈÇÄËØ∑‰∫∫ID: {inviter}")
    except Exception as e:
        logging.error(f"Â•ñÂä±ÈÇÄËØ∑ËÄÖÂ§±Ë¥•: {e}")

async def start_game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    with get_conn() as conn, conn.cursor() as c:
        c.execute("SELECT is_blocked, plays, phone FROM users WHERE user_id = %s", (user.id,))
        row = c.fetchone()
    if not row:
        await query.edit_message_text("‚ö†Ô∏è ‰Ω†ËøòÊú™ÊéàÊùÉÊâãÊú∫Âè∑ÔºåËØ∑ÂÖàÁßÅËÅäÊàëÂèëÈÄÅÊâãÊú∫Âè∑ÊéàÊùÉ„ÄÇ")
        return
    is_blocked, plays, phone = row
    if is_blocked:
        await query.edit_message_text("‚õîÔ∏è ‰Ω†Â∑≤Ë¢´Á¶ÅÊ≠¢ÂèÇ‰∏é‰∫íÂä®ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò„ÄÇ")
        return
    if not phone:
        await query.edit_message_text("üìµ ËØ∑ÂÖàÊéàÊùÉÊâãÊú∫Âè∑ÂêéÊâçËÉΩÂèÇ‰∏éÊ∏∏ÊàèÔºÅ")
        return
    if plays >= 10:
        await query.edit_message_text("‚ùå ‰ªäÂ§©Â∑≤Áî®ÂÆå10Ê¨°Êú∫‰ºöÔºåËØ∑ÊòéÂ§©ÂÜçÊù•ÔºÅ")
        return

    try:
        await query.delete_message()
        dice1 = await context.bot.send_dice(chat_id=query.message.chat_id)
        await asyncio.sleep(3)
        dice2 = await context.bot.send_dice(chat_id=query.message.chat_id)
        await asyncio.sleep(3)
        score = 10 if dice1.dice.value > dice2.dice.value else -5 if dice1.dice.value < dice2.dice.value else 0

        with get_conn() as conn, conn.cursor() as c:
            c.execute("UPDATE users SET points = points + %s, plays = plays + 1, last_play = %s WHERE user_id = %s",
                      (score, datetime.now().isoformat(), user.id))
            c.execute("""
                INSERT INTO game_history (user_id, created_at, user_score, bot_score, result, points_change)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (user.id, datetime.now(), dice1.dice.value, dice2.dice.value,
                  'Ëµ¢' if score > 0 else 'Ëæì' if score < 0 else 'Âπ≥Â±Ä', score))
            c.execute("SELECT points FROM users WHERE user_id = %s", (user.id,))
            total = c.fetchone()[0]
            conn.commit()

        if score > 0:
            result_emoji = "üéâüéâüéâ"
            result_text = f"‰Ω†Ëµ¢‰∫ÜÔºÅ+10ÁßØÂàÜ {result_emoji}"
        elif score < 0:
            result_emoji = "üòûüíî"
            result_text = f"‰Ω†Ëæì‰∫Ü... -5ÁßØÂàÜ {result_emoji}"
        else:
            result_emoji = "üòê"
            result_text = f"Âπ≥Â±ÄÔºÅ {result_emoji}"

        msg = (
            f"üé≤ ‰Ω†Êé∑Âá∫ {dice1.dice.value}ÔºåÊàëÊé∑Âá∫ {dice2.dice.value}ÔºÅ\n"
            f"{result_text}\n"
            f"üìä ÂΩìÂâçÊÄªÁßØÂàÜÔºö{total}"
        )

        help_button = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùì Áé©Ê≥ïËØ¥Êòé", callback_data="help_rules")]]
        )
        await context.bot.send_message(chat_id=query.message.chat_id, text=msg, reply_markup=help_button)
    except Exception as e:
        logging.error(f"Ê∏∏ÊàèÂºÄÂßãÂºÇÂ∏∏: {e}")
        await query.message.reply_text("‚ö†Ô∏è Ê∏∏ÊàèÂá∫ÈîôÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ")

async def handle_group_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    dice = update.message.dice
    with get_conn() as conn, conn.cursor() as c:
        c.execute("SELECT is_blocked, plays, phone FROM users WHERE user_id = %s", (user.id,))
        row = c.fetchone()
    if not row or not row[2]:
        bot_username = (await context.bot.get_me()).username
        private_link = f"https://t.me/{bot_username}?start={user.id}"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîê ÁÇπÊàëÊéàÊùÉÊâãÊú∫Âè∑", url=private_link)]])
        await update.message.reply_text(
            f"üìµ @{user.username or user.first_name} ËØ∑ÁßÅËÅäÊàëÊéàÊùÉÊâãÊú∫Âè∑ÂêéÊâçËÉΩÂèÇ‰∏éÊ∏∏ÊàèÔºÅ",
            reply_markup=keyboard
        )
        return
    is_blocked, plays, phone = row
    if is_blocked:
        await update.message.reply_text("‚õîÔ∏è ‰Ω†Â∑≤Ë¢´Á¶ÅÊ≠¢ÂèÇ‰∏éÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò„ÄÇ")
        return
    if plays >= 10:
        await update.message.reply_text("‚ùå ‰ªäÂ§©Â∑≤Áî®ÂÆå10Ê¨°Êú∫‰ºöÔºåËØ∑ÊòéÂ§©ÂÜçÊù•ÔºÅ")
        return

    try:
        bot_msg = await update.message.reply_dice()
        await asyncio.sleep(3)
        user_score, bot_score = dice.value, bot_msg.dice.value
        score = 10 if user_score > bot_score else -5 if user_score < bot_score else 0
        with get_conn() as conn, conn.cursor() as c:
            c.execute("UPDATE users SET points = points + %s, plays = plays + 1, last_play = %s WHERE user_id = %s",
                      (score, datetime.now().isoformat(), user.id))
            c.execute("""
                INSERT INTO game_history (user_id, created_at, user_score, bot_score, result, points_change)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (user.id, datetime.now(), user_score, bot_score,
                  'Ëµ¢' if score > 0 else 'Ëæì' if score < 0 else 'Âπ≥Â±Ä', score))
            c.execute("SELECT points FROM users WHERE user_id = %s", (user.id,))
            total = c.fetchone()[0]
            conn.commit()

        if score > 0:
            result_emoji = "üéâüéâüéâ"
            result_text = f"‰Ω†Ëµ¢‰∫ÜÔºÅ+10ÁßØÂàÜ {result_emoji}"
        elif score < 0:
            result_emoji = "üòûüíî"
            result_text = f"‰Ω†Ëæì‰∫Ü... -5ÁßØÂàÜ {result_emoji}"
        else:
            result_emoji = "üòê"
            result_text = f"Âπ≥Â±ÄÔºÅ {result_emoji}"

        msg = (
            f"üé≤ ‰Ω†Êé∑Âá∫ {user_score}ÔºåÊàëÊé∑Âá∫ {bot_score}ÔºÅ\n"
            f"{result_text}\n"
            f"üìä ÂΩìÂâçÊÄªÁßØÂàÜÔºö{total}"
        )

        help_button = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùì Áé©Ê≥ïËØ¥Êòé", callback_data="help_rules")]]
        )
        await update.message.reply_text(msg, reply_markup=help_button)
    except Exception as e:
        logging.error(f"Áæ§ÁªÑÈ™∞Â≠êÊ∏∏ÊàèÂºÇÂ∏∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ê∏∏ÊàèÂºÇÂ∏∏ÔºåËØ∑Á®çÂêéÈáçËØï„ÄÇ")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with get_conn() as conn, conn.cursor() as c:
        c.execute("""
            SELECT points, plays, inviter_rewarded
            FROM users WHERE user_id = %s
        """, (user.id,))
        row = c.fetchone()
    if not row:
        await update.message.reply_text("‚ö†Ô∏è ‰Ω†ËøòÊú™Ê≥®ÂÜåÔºåËØ∑ÂÖàÂèëÈÄÅ /start")
        return
    points, plays, invited_rewarded = row
    msg = (
        f"üë§ Áî®Êà∑ËµÑÊñôÔºö\n"
        f"üéØ ÊÄªÁßØÂàÜÔºö{points}\n"
        f"üé≤ ‰ªäÊó•Ê∏∏ÊàèÊ¨°Êï∞Ôºö{plays} / 10\n"
        f"üéÅ ÈÇÄËØ∑Â•ñÂä±Â∑≤È¢ÜÂèñÔºö{'ÊòØ' if invited_rewarded else 'Âê¶'}\n"
        f"üîó ÂèëÈÄÅ /invite Ëé∑ÂèñÈÇÄËØ∑ÈìæÊé•ËµöÁßØÂàÜÔºÅ"
    )
    await update.message.reply_text(msg)

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bot_name = (await context.bot.get_me()).username
    invite_link = f"https://t.me/{bot_name}?start={user.id}"
    msg = (
        f"üì¢ ‰Ω†ÁöÑÈÇÄËØ∑ÈìæÊé•Ôºö\n"
        f"{invite_link}\n\n"
        "ÈÇÄËØ∑Â•ΩÂèãÊ≥®ÂÜåÂπ∂ÂèÇ‰∏éÊ∏∏ÊàèÔºåÂèåÊñπÈÉΩÂèØËé∑ÂæóÁßØÂàÜÂ•ñÂä±ÔºÅ"
    )
    await update.message.reply_text(msg)

async def show_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = date.today().isoformat()
    with get_conn() as conn, conn.cursor() as c:
        c.execute("SELECT username, first_name, points FROM users WHERE last_play LIKE %s ORDER BY points DESC LIMIT 10", (f"{today}%",))
        rows = c.fetchall()
    if not rows:
        await update.message.reply_text("üì¨ ‰ªäÊó•ÊöÇÊó†Áé©ÂÆ∂ÁßØÂàÜËÆ∞ÂΩï")
        return
    msg = "üìä ‰ªäÊó•ÊéíË°åÊ¶úÔºö\n"
    medals = ["ü•á", "ü•à", "ü•â"] + ["üéñ"] * 7
    for i, row in enumerate(rows):
        name = row[0] or row[1] or "ÂåøÂêç"
        msg += f"{medals[i]} {name[:4]}*** - {row[2]} ÂàÜ\n"
    await update.message.reply_text(msg)

async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bot_name = (await context.bot.get_me()).username
    link = f"https://t.me/{bot_name}?start={user.id}"
    await update.message.reply_text(f"üîó ‰Ω†ÁöÑÈÇÄËØ∑ÈìæÊé•Ôºö\n{link}\n\nüéÅ ÈÇÄËØ∑ÊàêÂäüÂç≥ÂèØËé∑Âæó +10 ÁßØÂàÜÂ•ñÂä±ÔºÅ")

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    inviter = chat_member.from_user
    new_user = chat_member.new_chat_member.user
    if chat_member.old_chat_member.status == "left" and chat_member.new_chat_member.status == "member":
        if new_user.is_bot or inviter.id == new_user.id:
            return
        with get_conn() as conn, conn.cursor() as c:
            c.execute("SELECT 1 FROM users WHERE user_id = %s", (new_user.id,))
            if not c.fetchone():
                now = datetime.now().isoformat()
                c.execute("INSERT INTO users (user_id, username, invited_by, created_at) VALUES (%s, %s, %s, %s)",
                          (new_user.id, new_user.username or '', inviter.id, now))
                conn.commit()

async def run_telegram_bot():
    app_ = ApplicationBuilder().token(BOT_TOKEN).build()
    app_.add_handler(CommandHandler("start", start))
    app_.add_handler(CommandHandler("help", help_command))
    app_.add_handler(CommandHandler("profile", profile))
    app_.add_handler(CommandHandler("invite", invite))
    app_.add_handler(CommandHandler("rank", show_rank))
    app_.add_handler(CommandHandler("share", share))
    app_.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app_.add_handler(MessageHandler(filters.Dice.DICE & filters.ChatType.GROUPS, handle_group_dice))
    app_.add_handler(CallbackQueryHandler(start_game_callback, pattern="^start_game$"))
    app_.add_handler(CallbackQueryHandler(help_callback, pattern="^help_rules$"))
    app_.add_handler(ChatMemberHandler(handle_new_member, ChatMemberHandler.CHAT_MEMBER))
    await app_.run_polling(close_loop=False)

def reset_daily():
    with get_conn() as conn, conn.cursor() as c:
        c.execute("UPDATE users SET plays = 0")
        conn.commit()
    logging.info("üîÑ Â∑≤ÈáçÁΩÆÊØèÊó•Ê¨°Êï∞")

async def main():
    init_db()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(reset_daily, "cron", hour=0, minute=0)
    scheduler.start()
    config = Config()
    config.bind = ["0.0.0.0:8080"]
    web_task = serve(app, config)
    bot_task = run_telegram_bot()
    await asyncio.gather(web_task, bot_task)

if __name__ == "__main__":
    asyncio.run(main())
